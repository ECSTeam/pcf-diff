#!/bin/bash -e
#
# options:
#
# prd-ver - list the product versions
# prd-res - list all product resources and differences
# prd-res-diff - list only the product resources differences
#

# foundations to compare
ops_mgr_host1=
ops_mgr_usr1=
ops_mgr_pwd1=

ops_mgr_host2=
ops_mgr_usr2=
ops_mgr_pwd2=

show_all=false

function get_compare_names {

  # $1 - expands to names[@] !1 - expands to ${names[@]}
  local names=(${!1})

  for ((idx=0; idx<${#names[@]}; idx++)); do

    # support for product names without a unique identifier
    if [[ ${names[$idx]} != "p-bosh" ]]; then
        # remove unique identifier in order to just compare product names
        names[$idx]=${names[$idx]%-*}
    fi

  done

  echo ${names[@]}
}

function array_contains {

  local array=(${!1})
  local seeking=$2
  local pos=-1

  for ((idx=0; idx<${#array[@]}; idx++)); do

    element=${array[$idx]}

    if [[ $element == $seeking ]]; then
      pos=$idx
      break
    fi
  done

  echo $pos
}

function get_prd_ver {

  local prds=(${!1})
  local name=$2
  local ver=

  for ((idx=0; idx<${#prds[@]}; idx++)); do

    prd_name=$(echo ${prds[$idx]} | jq -r .name)

    if [[ $prd_name == $name ]]; then
      ver=$(echo ${prds[$idx]} | jq -r .version)
      break
    fi
  done

  echo $ver
}

function diff_ver {

  read -a prds1 <<<$(om -k -t $ops_mgr_host1 -u $ops_mgr_usr1 \
    -p $ops_mgr_pwd1 curl -path /api/v0/diagnostic_report -s |
    jq -r .added_products.deployed | jq -c .[])
  names1=($(echo ${prds1[@]} | jq -r .name))
  read -a prds2 <<<$(om -k -t $ops_mgr_host2 -u $ops_mgr_usr2 \
    -p $ops_mgr_pwd2 curl -path /api/v0/diagnostic_report -s |
    jq -r .added_products.deployed | jq -c .[])
  names2=($(echo ${prds2[@]} | jq -r .name))

  echo -e "\n\nproduct versions"
  for ((idx=0; idx<${#prds1[@]}; idx++)); do

    name=$(echo ${prds1[$idx]} | jq -r .name)

    position2=$(array_contains names2[@] $name)

    if [ $position2 -ge 0 ]; then

      printf "  host: %s product: %-28s release: %-15s | " \
        $ops_mgr_host1 $name $(echo ${prds1[$idx]} | jq -r .version)
      printf "  host: %s product: %-28s release: %-15s\n" \
        $ops_mgr_host2 $name $(echo ${prds2[$position2]} | jq -r .version)

      # remove the element so that only products left can be identified for
      # each foundation being compared

      position1=$(array_contains names1[@] $name)
      names1=(${names1[@]:0:$position1}
        ${names1[@]:$(($position1 + 1))})

      names2=(${names2[@]:0:$position2}
        ${names2[@]:$(($position2 + 1))})
      prds2=(${prds2[@]:0:$position2}
        ${prds2[@]:$(($position2 + 1))})
    fi
  done

  if [ ${#names1[@]} -gt 0 ]; then

    echo -e "\nthe following products only exists in $ops_mgr_host1:"

    for ((idx=0; idx<${#names1[@]}; idx++)); do

      name=${names1[$idx]}

      printf "  product: %-28s release: %-15s\n" \
        $name $(get_prd_ver prds1[@] $name)
    done
  fi

  if [ ${#names2[@]} -gt 0 ]; then

    echo -e "\nthe following products only exists in $ops_mgr_host2:"

    for ((idx=0; idx<${#names2[@]}; idx++)); do

      name=${names2[$idx]}

      printf "  product: %-28s release: %-15s\n" \
        $name $(get_prd_ver prds2[@] $name)
    done
  fi
}

function diff_prd_res {

  prds1=$(om -k -t $ops_mgr_host1 -u $ops_mgr_usr1 \
    -p $ops_mgr_pwd1 curl -path /api/v0/deployed/products -s)
  names1=($(echo $prds1 | jq -r '.[].installation_name'))
  compare_names1=($(get_compare_names names1[@]))

  prds2=$(om -k -t $ops_mgr_host2 -u $ops_mgr_usr2 \
    -p $ops_mgr_pwd2 curl -path /api/v0/deployed/products -s)
  names2=($(echo $prds2 | jq -r '.[].installation_name'))
  compare_names2=($(get_compare_names names2[@]))

  #echo "names in foundation 1 => ${names1[@]}"
  #echo "compare names 1 => ${compare_names1[@]}"
  #echo "names in foundation 2 => ${names2[@]}"
  #echo "compare names 2 => ${compare_names2[@]}"

  ops_man_ver1=$(om -k -t $ops_mgr_host1 -u $ops_mgr_usr1 -p $ops_mgr_pwd1 \
    curl -path /api/v0/diagnostic_report -s | jq -r '.versions.release_version')
  ops_man_ver2=$(om -k -t $ops_mgr_host2 -u $ops_mgr_usr2 -p $ops_mgr_pwd2 \
    curl -path /api/v0/diagnostic_report -s | jq -r '.versions.release_version')

  echo -e "\n\ncomparing host: $ops_mgr_host1 version: $ops_man_ver1" \
          "host: $ops_mgr_host2 version: $ops_man_ver2"

  for ((idx=0; idx<${#names1[@]}; idx++)); do

    name=${names1[$idx]}

    if [[ $name == "p-bosh" ]]; then
      # remove the element so that only products left can be identified for
      # each foundation being compared

      position1=$(array_contains compare_names1[@] $name)
      compare_names1=(${compare_names1[@]:0:$position1}
        ${compare_names1[@]:$(($position1 + 1))})

      position2=$(array_contains compare_names2[@] $name)
      compare_names2=(${compare_names2[@]:0:$position2}
        ${compare_names2[@]:$(($position2 + 1))})
      names2=(${names2[@]:0:$position2}
        ${names2[@]:$(($position2 + 1))})

      continue
    fi

    # support for product names with a unique identifier
    name=${name%-*}

    position2=$(array_contains compare_names2[@] $name)

    if [ $position2 -ge 0 ]; then

      if [[ $show_all == false ]]; then
        echo -e "\n\ncomparing product: $name          SHOWING ONLY DIFFERENCES"
      else
        echo -e "\n\ncomparing product: $name"
      fi

      # for now only comparing instance type, instances count and disk size, if a
      # specific instance type is not selected it defaults to Automatic

      jobs_res1=$(echo $(om -k -t $ops_mgr_host1 -u $ops_mgr_usr1 \
        -p $ops_mgr_pwd1 \
        curl -path /api/v0/staged/products/${names1[$idx]}/resources -s) |
        jq -r .[])

      jobs_res2=$(echo $(om -k -t $ops_mgr_host2 -u $ops_mgr_usr2 \
        -p $ops_mgr_pwd2 \
        curl -path /api/v0/staged/products/${names2[$position2]}/resources -s) |
        jq -r .[])

      # ensure the same jobs are compared
      identifiers1=($(echo $jobs_res1 | jq -r .[] | jq -r .identifier))
      identifiers2=($(echo $jobs_res2 | jq -r .[] | jq -r .identifier))

      # base64 is required to handle blank spaces in description
      read -a jobs1 <<<$(echo $jobs_res1 | jq -r '.[] | @base64')
      read -a jobs2 <<<$(echo $jobs_res2 | jq -r '.[] | @base64')

      for ((job_idx=0; job_idx<${#jobs1[@]}; job_idx++)); do

        _jq() {
          echo ${1} | base64 --decode | jq -r ${2}
        }

        identifier=$(echo $(_jq ${jobs1[$job_idx]} .identifier))

        id_position2=$(array_contains identifiers2[@] $identifier)

        if [ $id_position2 -ge 0 ]; then

          echo "  comparing job: $identifier"

          instances1=$(echo $(_jq ${jobs1[$job_idx]} .instances))
          instances2=$(echo $(_jq ${jobs2[$id_position2]} .instances))

          if [[ ${#instances1} -eq 0 ]]; then
            instances1=$(echo "Automatic:" \
              $(_jq ${jobs1[$job_idx]} .instances_best_fit))
          fi
          if [[ ${#instances2} -eq 0 ]]; then
            instances2=$(echo "Automatic:" \
              $(_jq ${jobs2[$id_position2]} .instances_best_fit))
          fi

          different=""
          if [[ "$instances1" != "$instances2" ]]; then
            different="*** DIFFERENT ***"
          fi

          if [[ $show_all == true || ! -z $different ]]; then
            printf "    host: %s instances: %-22s | " \
              $ops_mgr_host1 "$instances1"
            printf "host: %s instances: %-22s    %s\n" \
              $ops_mgr_host2 "$instances2" "$different"
          fi

          disk_size1=$(echo $(_jq ${jobs1[$job_idx]} .persistent_disk_mb))
          disk_size2=$(echo $(_jq ${jobs2[$id_position2]} .persistent_disk_mb))

          if [[ "$disk_size1" == "null" ]]; then
            disk_size1="None"
          fi
          if [[ "$disk_size2" == "null" ]]; then
            disk_size2="None"
          fi

          different=""
          if [[ "$disk_size1" != "$disk_size2" ]]; then
            different="*** DIFFERENT ***"
          fi

          if [[ $show_all == true || ! -z $different ]]; then
            printf "    host: %s disk size: %-22s | " \
              $ops_mgr_host1 "$disk_size1"
            printf "host: %s disk size: %-22s    %s\n" \
              $ops_mgr_host2 "$disk_size2" "$different"
          fi

          vm_type_id1=$(echo $(_jq ${jobs1[$job_idx]} .instance_type_id))
          vm_type_id2=$(echo $(_jq ${jobs2[$id_position2]} .instance_type_id))

          if [[ ${#vm_type_id1} -eq 0 ]]; then
            vm_type_id1=$(echo "Automatic:" \
              $(_jq ${jobs1[$job_idx]} .instance_type_best_fit))
          fi
          if [[ ${#vm_type_id2} -eq 0 ]]; then
            vm_type_id2=$(echo "Automatic:" \
              $(_jq ${jobs2[$id_position2]} .instance_type_best_fit))
          fi

          different=""
          if [[ "$vm_type_id1" != "$vm_type_id2" ]]; then
            different="*** DIFFERENT ***"
          fi

          if [[ $show_all == true || ! -z $different ]]; then
            printf "    host: %s vm type:   %-22s | " \
              $ops_mgr_host1 "$vm_type_id1"
            printf "host: %s vm type:   %-22s    %s\n" \
              $ops_mgr_host2 "$vm_type_id2" $different
          fi

          # remove the element so that only jobs left can be identified for
          # each foundation being compared
          id_position1=$(array_contains identifiers1[@] $identifier)
          identifiers1=(${identifiers1[@]:0:$id_position1}
            ${identifiers1[@]:$(($id_position1 + 1))})
          identifiers2=(${identifiers2[@]:0:$id_position2}
            ${identifiers2[@]:$(($id_position2 + 1))})
          jobs2=(${jobs2[@]:0:$id_position2}
            ${jobs2[@]:$(($id_position2 + 1))})
        fi
      done

      if [[ ${#identifiers1[@]} -gt 0 || ${#identifiers2[@]} -gt 0 ]]; then
        echo -e "\n"
      fi

      if [ ${#identifiers1[@]} -gt 0 ]; then
        echo "  the following jobs only exists in $ops_mgr_host1 =>" \
             "[${identifiers1[@]}]"
      fi

      if [ ${#identifiers2[@]} -gt 0 ]; then
        echo "  the following jobs only exists in $ops_mgr_host2 =>" \
             "[${identifiers2[@]}]"
      fi

      # remove the element so that only products left can be identified for
      # each foundation being compared
      position1=$(array_contains compare_names1[@] $name)
      compare_names1=(${compare_names1[@]:0:$position1}
        ${compare_names1[@]:$(($position1 + 1))})
      compare_names2=(${compare_names2[@]:0:$position2}
        ${compare_names2[@]:$(($position2 + 1))})
      names2=(${names2[@]:0:$position2}
        ${names2[@]:$(($position2 + 1))})
    fi
  done

  if [[ ${#compare_names1[@]} -gt 0 || ${#compare_names2[@]} -gt 0 ]]; then
    echo -e "\n"
  fi

  if [ ${#compare_names1[@]} -gt 0 ]; then
    echo "the following products only exists in $ops_mgr_host1 =>" \
         "[${compare_names1[@]}]"
  fi

  if [ ${#compare_names2[@]} -gt 0 ]; then
    echo "the following products only exists in $ops_mgr_host2 =>" \
         "[${compare_names2[@]}]"
  fi
}

function usage {
cat <<EOF
USAGE:
  pcf-diff <command> [<options>]

COMMANDS <command>:
  help:     display this help screen
  versions: list the product versions
  products: list only the product resource differences

OPTIONS:
  -a,--all         list all product resources
  -n1,--hostname1  Ops Manager host name or IP address of PCF foundation one," \
  "prompt if not specified
  -u1,--username1  Ops Manager admin username of PCF foundation one," \
  "prompt if not specified
  -p1,--password1  Ops Manager admin password of PCF foundation one, prompt if not specified
  -n2,--hostname2  Ops Manager host name or IP address of PCF foundation two, prompt if not specified
  -u2,--username2  Ops Manager admin username of PCF foundation two, prompt if not specified
  -p2,--password2  Ops Manager admin password of PCF foundation two, prompt if not specified
EOF
}

function process_args {

	while [[ $# -gt 0 ]]; do

		key="$1"

    case "$key" in
      -a|--all)
      show_all=true
      ;;
      -n1|--hostname1)
			shift
      ops_mgr_host1="$1"
      ;;
      -u1|--username1)
			shift
      ops_mgr_usr1="$1"
      ;;
			-p1|--password1)
      shift
      ops_mgr_pwd1="$1"
      ;;
      -n2|--hostname2)
			shift
      ops_mgr_host2="$1"
      ;;
      -u2|--username2)
			shift
      ops_mgr_usr2="$1"
      ;;
			-p2|--password2)
      shift
      ops_mgr_pwd2="$1"
      ;;
    esac

    # Shift after checking all the cases to get the next option
    shift
	done

  # prompt for anything missing from command line
	while [[ -z $ops_mgr_host1 ]]; do
		read -p "Ops Manager host: " host
	done
	while [[ -z $ops_mgr_usr1 ]]; do
		read -p "Ops Manager admin username: " user
	done
	while [[ -z $ops_mgr_pwd1 ]]; do
		read -p "Ops Manager admin password: " password
	done
  while [[ -z $ops_mgr_host2 ]]; do
		read -p "Ops Manager host: " host
	done
	while [[ -z $ops_mgr_usr2 ]]; do
		read -p "Ops Manager admin username: " user
	done
	while [[ -z $ops_mgr_pwd2 ]]; do
		read -p "Ops Manager admin password: " password
	done
}

command="$1"

if [ -z $command ] || [ $command == "help" ]; then
	usage
	exit 1
fi

shift
process_args "$@"

if [ $command == "versions" ]; then

  diff_ver

elif [ $command == "products" ]; then

  diff_prd_res

fi
